{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "glass-navbar",
  "type": "registry:ui",
  "dependencies": [
    "motion",
    "next/link"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/GlassNavbar.tsx",
      "content": "\"use client\"\r\nimport { useState, useEffect } from \"react\"\r\nimport type React from \"react\"\r\n\r\nimport { motion } from \"motion/react\"\r\nimport Link from \"next/link\"\r\nimport { LiquidGlassBackground } from \"./liquidGlassBackground\"\r\n\r\nconst Navbar = () => {\r\n  const [isScrolled, setIsScrolled] = useState(false)\r\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      setIsScrolled(window.scrollY > 50)\r\n    }\r\n\r\n    // Add throttling for smoother performance\r\n    let ticking = false\r\n    const smoothScroll = () => {\r\n      if (!ticking) {\r\n        requestAnimationFrame(() => {\r\n          handleScroll()\r\n          ticking = false\r\n        })\r\n        ticking = true\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"scroll\", smoothScroll)\r\n    return () => window.removeEventListener(\"scroll\", smoothScroll)\r\n  }, [])\r\n\r\n  // Close mobile menu when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (isMobileMenuOpen && !(event.target as Element).closest(\".mobile-menu-container\")) {\r\n        setIsMobileMenuOpen(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\r\n  }, [isMobileMenuOpen])\r\n\r\n  // Prevent body scroll when mobile menu is open\r\n  useEffect(() => {\r\n    if (isMobileMenuOpen) {\r\n      document.body.style.overflow = \"hidden\"\r\n    } else {\r\n      document.body.style.overflow = \"unset\"\r\n    }\r\n    // Cleanup on unmount\r\n    return () => {\r\n      document.body.style.overflow = \"unset\"\r\n    }\r\n  }, [isMobileMenuOpen])\r\n\r\n  const Logo = () => (\r\n    <Link href=\"/\" className=\"font-normal flex space-x-2 items-center text-sm mr-4 text-white px-2 py-1 relative z-20\">\r\n      <span className=\"font-medium text-white\">QI</span>\r\n    </Link>\r\n  )\r\n\r\n  // Smooth scroll handler for hash links\r\n  const handleSmoothScroll = (e: React.MouseEvent<HTMLAnchorElement>, hash: string) => {\r\n    if (hash.startsWith(\"#\")) {\r\n      e.preventDefault()\r\n      const el = document.getElementById(hash.substring(1))\r\n      if (el) {\r\n        el.scrollIntoView({ behavior: \"smooth\" })\r\n      }\r\n    }\r\n  }\r\n\r\n  const NavLinks = () => (\r\n    <div className=\"lg:flex flex-row flex-1 absolute inset-0 hidden items-center justify-center space-x-2 lg:space-x-2 text-sm text-zinc-300 font-medium hover:text-zinc-100 transition duration-300\">\r\n      <Link\r\n        href=\"/#about\"\r\n        className=\"text-neutral-300 relative px-4 py-2 hover:text-neutral-100 transition-all duration-300 ease-out hover:scale-105\"\r\n        onClick={(e) => handleSmoothScroll(e, \"#about\")}\r\n      >\r\n        <span className=\"relative z-20\">About</span>\r\n      </Link>\r\n      <Link\r\n        href=\"/#projects\"\r\n        className=\"text-neutral-300 relative px-4 py-2 hover:text-neutral-100 transition-all duration-300 ease-out hover:scale-105\"\r\n        onClick={(e) => handleSmoothScroll(e, \"#projects\")}\r\n      >\r\n        <span className=\"relative z-20\">Projects</span>\r\n      </Link>\r\n      <Link\r\n        href=\"/#contact\"\r\n        className=\"text-neutral-300 relative px-4 py-2 hover:text-neutral-100 transition-all duration-300 ease-out hover:scale-105\"\r\n        onClick={(e) => handleSmoothScroll(e, \"#contact\")}\r\n      >\r\n        <span className=\"relative z-20\">Contact</span>\r\n      </Link>\r\n    </div>\r\n  )\r\n\r\n  const ActionButtons = () => (\r\n    <div className=\"flex items-center gap-4\">\r\n      <button\r\n        className=\"px-3 py-2 rounded-md bg-white text-black text-sm font-bold relative cursor-pointer hover:-translate-y-1 transition-all duration-300 ease-out text-center shadow-[0_0_24px_rgba(34,_42,_53,_0.06),_0_1px_1px_rgba(0,_0,_0,_0.05),_0_0_0_1px_rgba(34,_42,_53,_0.04),_0_0_4px_rgba(34,_42,_53,_0.08),_0_16px_68px_rgba(47,_48,_55,_0.05),_0_1px_0_rgba(255,_255,_255,_0.1)_inset] hidden md:block hover:scale-105 hover:shadow-[0_0_32px_rgba(34,_42,_53,_0.12),_0_2px_4px_rgba(0,_0,_0,_0.1),_0_0_0_1px_rgba(34,_42,_53,_0.08),_0_0_8px_rgba(34,_42,_53,_0.16),_0_24px_80px_rgba(47,_48,_55,_0.1),_0_2px_0_rgba(255,_255,_255,_0.15)_inset] hover:bg-gray-100\"\r\n        data-cal-namespace=\"chat-with-QI\"\r\n        data-cal-link=\"QI/demo\"\r\n        data-cal-config='{\"layout\":\"month_view\"}'\r\n      >\r\n        Book a call\r\n      </button>\r\n    </div>\r\n  )\r\n\r\n  const MobileMenuButton = () => (\r\n    <button\r\n      onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\r\n      className=\"p-2 rounded-md hover:bg-gray-800 transition-colors duration-200\"\r\n      aria-label=\"Toggle mobile menu\"\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width=\"24\"\r\n        height=\"24\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        className={`tabler-icon text-white transition-transform duration-200 ${isMobileMenuOpen ? \"rotate-90\" : \"\"}`}\r\n      >\r\n        {isMobileMenuOpen ? (\r\n          <>\r\n            <path d=\"M18 6L6 18\"></path>\r\n            <path d=\"M6 6l12 12\"></path>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <path d=\"M4 6l16 0\"></path>\r\n            <path d=\"M4 12l16 0\"></path>\r\n            <path d=\"M4 18l16 0\"></path>\r\n          </>\r\n        )}\r\n      </svg>\r\n    </button>\r\n  )\r\n\r\n  const MobileMenu = () => (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: -20 }}\r\n      animate={{\r\n        opacity: isMobileMenuOpen ? 1 : 0,\r\n        y: isMobileMenuOpen ? 0 : -20,\r\n        display: isMobileMenuOpen ? \"block\" : \"none\",\r\n      }}\r\n      transition={{ duration: 0.3, ease: \"easeInOut\" }}\r\n      className=\"absolute top-full left-0 right-0 mt-2 rounded-2xl shadow-lg border border-gray-800 overflow-hidden mobile-menu-container\"\r\n      style={{ position: \"relative\" }}\r\n    >\r\n      {/* Liquid Glass Background for Mobile Menu */}\r\n      <LiquidGlassBackground width={400} height={300} className=\"rounded-2xl\" />\r\n\r\n      <div className=\"flex flex-col p-4 space-y-4 relative z-10\">\r\n        <Link\r\n          href=\"/#about\"\r\n          className=\"text-neutral-300 px-4 py-3 hover:text-neutral-100 hover:bg-gray-800/30 rounded-lg transition-all duration-200\"\r\n          onClick={(e) => {\r\n            handleSmoothScroll(e, \"#about\")\r\n            setIsMobileMenuOpen(false)\r\n          }}\r\n        >\r\n          About\r\n        </Link>\r\n        <Link\r\n          href=\"/#projects\"\r\n          className=\"text-neutral-300 px-4 py-3 hover:text-neutral-100 hover:bg-gray-800/30 rounded-lg transition-all duration-200\"\r\n          onClick={(e) => {\r\n            handleSmoothScroll(e, \"#projects\")\r\n            setIsMobileMenuOpen(false)\r\n          }}\r\n        >\r\n          Projects\r\n        </Link>\r\n        <Link\r\n          href=\"/#contact\"\r\n          className=\"text-neutral-300 px-4 py-3 hover:text-neutral-100 hover:bg-gray-800/30 rounded-lg transition-all duration-200\"\r\n          onClick={(e) => {\r\n            handleSmoothScroll(e, \"#contact\")\r\n            setIsMobileMenuOpen(false)\r\n          }}\r\n        >\r\n          Contact\r\n        </Link>\r\n        <div className=\"border-t border-gray-700/50 pt-4 space-y-3\">\r\n          <button\r\n            className=\"w-full px-4 py-3 rounded-lg bg-white text-black text-sm font-bold hover:bg-gray-200 transition-all duration-200 shadow-md\"\r\n            data-cal-namespace=\"chat-with-QI\"\r\n            data-cal-link=\"QI/demo\"\r\n            data-cal-config='{\"layout\":\"month_view\"}'\r\n            onClick={() => setIsMobileMenuOpen(false)}\r\n          >\r\n            Book a call\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </motion.div>\r\n  )\r\n\r\n  return (\r\n    <div className=\"mt-2 w-full fixed top-0 inset-x-0 z-50\">\r\n      {/* Mobile Menu Backdrop */}\r\n      {isMobileMenuOpen && (\r\n        <motion.div\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          exit={{ opacity: 0 }}\r\n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden\"\r\n          onClick={() => setIsMobileMenuOpen(false)}\r\n        />\r\n      )}\r\n\r\n      {/* Desktop Navbar */}\r\n      <motion.div\r\n        className=\"hidden top-20 lg:flex flex-row self-start items-center justify-between py-2 max-w-7xl mx-auto px-4 rounded-full relative z-[60] w-full overflow-hidden\"\r\n        style={{\r\n          minWidth: \"800px\",\r\n          willChange: \"auto\",\r\n        }}\r\n        animate={{\r\n          boxShadow: isScrolled\r\n            ? \"rgba(0, 0, 0, 0.3) 0px 8px 32px, rgba(0, 0, 0, 0.2) 0px 4px 16px, rgba(34, 42, 53, 0.25) 0px 2px 8px, rgba(47, 48, 55, 0.2) 0px 32px 120px, rgba(255, 255, 255, 0.2) 0px 1px 0px inset, rgba(34, 42, 53, 0.7) 0px 0px 0px 1px\"\r\n            : \"none\",\r\n          transform: isScrolled ? \"translateY(20px)\" : \"none\",\r\n          width: isScrolled ? \"40%\" : \"100%\",\r\n        }}\r\n        transition={{\r\n          duration: 0.6,\r\n          ease: [0.25, 0.46, 0.45, 0.94],\r\n        }}\r\n      >\r\n        {/* Liquid Glass Background for Desktop */}\r\n        <LiquidGlassBackground width={800} height={80} className=\"rounded-full\" />\r\n\r\n        <div className=\"relative z-10 flex items-center justify-between w-full\">\r\n          <Logo />\r\n          <NavLinks />\r\n          <ActionButtons />\r\n        </div>\r\n      </motion.div>\r\n\r\n      {/* Mobile Navbar */}\r\n      <motion.div\r\n        className=\"flex relative flex-col lg:hidden w-full justify-between items-center max-w-[calc(100vw-2rem)] mx-auto px-0 py-2 z-50 overflow-hidden\"\r\n        style={{\r\n          willChange: \"auto\",\r\n          borderRadius: \"2rem\",\r\n        }}\r\n        animate={{\r\n          boxShadow: isScrolled\r\n            ? \"rgba(0, 0, 0, 0.4) 0px 8px 32px, rgba(0, 0, 0, 0.25) 0px 4px 16px, rgba(34, 42, 53, 0.3) 0px 2px 8px, rgba(47, 48, 55, 0.25) 0px 24px 80px, rgba(255, 255, 255, 0.15) 0px 1px 0px inset, rgba(34, 42, 53, 0.6) 0px 0px 0px 1px\"\r\n            : \"none\",\r\n          width: isScrolled ? \"90%\" : \"100%\",\r\n          paddingRight: isScrolled ? \"12px\" : \"0px\",\r\n          paddingLeft: isScrolled ? \"12px\" : \"0px\",\r\n          transform: isScrolled ? \"translateY(20px)\" : \"none\",\r\n        }}\r\n        transition={{\r\n          duration: 0.6,\r\n          ease: [0.25, 0.46, 0.45, 0.94],\r\n        }}\r\n      >\r\n        {/* Liquid Glass Background for Mobile */}\r\n        <LiquidGlassBackground width={400} height={80} className=\"rounded-2xl\" />\r\n\r\n        <div className=\"flex flex-row justify-between items-center w-full relative z-10\">\r\n          <Logo />\r\n          <MobileMenuButton />\r\n        </div>\r\n        <MobileMenu />\r\n      </motion.div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/default/ui/liquidGlassBackground.tsx",
      "content": "\"use client\"\r\nimport { useEffect, useRef, useState } from \"react\"\r\nimport type React from \"react\"\r\n\r\ninterface LiquidGlassBackgroundProps {\r\n  width: number\r\n  height: number\r\n  className?: string\r\n}\r\n\r\nexport const LiquidGlassBackground: React.FC<LiquidGlassBackgroundProps> = ({ width, height, className = \"\" }) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null)\r\n  const svgRef = useRef<SVGSVGElement>(null)\r\n  const containerRef = useRef<HTMLDivElement>(null)\r\n  const [filterId] = useState(() => `liquid-glass-3hvb6mapy`)\r\n  const mouseRef = useRef({ x: 0, y: 0 })\r\n  const mouseUsedRef = useRef(false)\r\n  const animationRef = useRef<number | undefined>(undefined)\r\n\r\n  // Utility functions - exact copies from original\r\n  const smoothStep = (a: number, b: number, t: number): number => {\r\n    t = Math.max(0, Math.min(1, (t - a) / (b - a)))\r\n    return t * t * (3 - 2 * t)\r\n  }\r\n\r\n  const length = (x: number, y: number): number => {\r\n    return Math.sqrt(x * x + y * y)\r\n  }\r\n\r\n  const roundedRectSDF = (x: number, y: number, width: number, height: number, radius: number): number => {\r\n    const qx = Math.abs(x) - width + radius\r\n    const qy = Math.abs(y) - height + radius\r\n    return Math.min(Math.max(qx, qy), 0) + length(Math.max(qx, 0), Math.max(qy, 0)) - radius\r\n  }\r\n\r\n  const texture = (x: number, y: number) => {\r\n    return { type: \"t\", x, y }\r\n  }\r\n\r\n  // Enhanced fragment shader logic that works on all sides\r\n  const fragment = (uv: { x: number; y: number }, mouse: { x: number; y: number }) => {\r\n    const ix = uv.x - 0.5\r\n    const iy = uv.y - 0.5\r\n\r\n    // Adjust SDF parameters for better coverage on all sides\r\n    const distanceToEdge = roundedRectSDF(ix, iy, 0.35, 0.25, 0.5)\r\n\r\n    // Enhanced displacement calculation that works better on all edges\r\n    const displacement = smoothStep(0.9, -0.1, distanceToEdge - 0.1)\r\n    const scaled = smoothStep(0, 1, displacement)\r\n\r\n    // Add subtle mouse influence for better interaction\r\n    const mouseInfluence = 0.05\r\n    const mouseDx = (mouse.x - 0.5) * mouseInfluence\r\n    const mouseDy = (mouse.y - 0.5) * mouseInfluence\r\n\r\n    return texture(ix * scaled + 0.5 + mouseDx * displacement, iy * scaled + 0.5 + mouseDy * displacement)\r\n  }\r\n\r\n  const updateShader = () => {\r\n    const canvas = canvasRef.current\r\n    const svg = svgRef.current\r\n    if (!canvas || !svg) return\r\n\r\n    const context = canvas.getContext(\"2d\")\r\n    if (!context) return\r\n\r\n    // Mouse proxy to track usage - exact copy from original\r\n    const mouseProxy = new Proxy(mouseRef.current, {\r\n      get: (target, prop) => {\r\n        mouseUsedRef.current = true\r\n        return target[prop as keyof typeof target]\r\n      },\r\n    })\r\n\r\n    mouseUsedRef.current = false\r\n\r\n    const w = canvas.width\r\n    const h = canvas.height\r\n    const data = new Uint8ClampedArray(w * h * 4)\r\n    let maxScale = 0\r\n    const rawValues: number[] = []\r\n\r\n    // Exact shader logic from original\r\n    for (let i = 0; i < data.length; i += 4) {\r\n      const x = (i / 4) % w\r\n      const y = Math.floor(i / 4 / w)\r\n      const pos = fragment({ x: x / w, y: y / h }, mouseProxy)\r\n      const dx = pos.x * w - x\r\n      const dy = pos.y * h - y\r\n      maxScale = Math.max(maxScale, Math.abs(dx), Math.abs(dy))\r\n      rawValues.push(dx, dy)\r\n    }\r\n\r\n    maxScale *= 0.8\r\n    let index = 0\r\n\r\n    for (let i = 0; i < data.length; i += 4) {\r\n      const r = rawValues[index++] / maxScale + 0.5\r\n      const g = rawValues[index++] / maxScale + 0.5\r\n      data[i] = r * 255\r\n      data[i + 1] = g * 255\r\n      data[i + 2] = 0\r\n      data[i + 3] = 255\r\n    }\r\n\r\n    context.putImageData(new ImageData(data, w, h), 0, 0)\r\n\r\n    // Update SVG filter\r\n    const feImage = svg.querySelector(`#${filterId}_map`) as SVGFEImageElement\r\n    const feDisplacementMap = svg.querySelector(\"feDisplacementMap\") as SVGFEDisplacementMapElement\r\n\r\n    if (feImage && feDisplacementMap) {\r\n      feImage.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", canvas.toDataURL())\r\n      feDisplacementMap.setAttribute(\"scale\", (maxScale / 0.8).toString())\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    if (!canvas) return\r\n\r\n    canvas.width = width\r\n    canvas.height = height\r\n\r\n    const animate = () => {\r\n      if (mouseUsedRef.current) {\r\n        updateShader()\r\n      }\r\n      animationRef.current = requestAnimationFrame(animate)\r\n    }\r\n\r\n    // Initial shader update\r\n    updateShader()\r\n    animate()\r\n\r\n    return () => {\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current)\r\n      }\r\n    }\r\n  }, [width, height])\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current\r\n    if (!container) return\r\n\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      const rect = container.getBoundingClientRect()\r\n      mouseRef.current = {\r\n        x: (e.clientX - rect.left) / rect.width,\r\n        y: (e.clientY - rect.top) / rect.height,\r\n      }\r\n      updateShader()\r\n    }\r\n\r\n    container.addEventListener(\"mousemove\", handleMouseMove)\r\n    return () => container.removeEventListener(\"mousemove\", handleMouseMove)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {/* Hidden canvas for displacement map */}\r\n      <canvas ref={canvasRef} style={{ display: \"none\" }} width={width} height={height} />\r\n\r\n      {/* SVG Filter - exact structure from original */}\r\n      <svg ref={svgRef} width=\"0\" height=\"0\" style={{ position: \"absolute\", pointerEvents: \"none\" }}>\r\n        <defs>\r\n          <filter\r\n            id={filterId}\r\n            filterUnits=\"userSpaceOnUse\"\r\n            colorInterpolationFilters=\"sRGB\"\r\n            x=\"0\"\r\n            y=\"0\"\r\n            width={width}\r\n            height={height}\r\n          >\r\n            <feImage id={`${filterId}_map`} width={width} height={height} />\r\n            <feDisplacementMap in=\"SourceGraphic\" in2={`${filterId}_map`} xChannelSelector=\"R\" yChannelSelector=\"G\" />\r\n          </filter>\r\n        </defs>\r\n      </svg>\r\n\r\n      {/* Background element with original liquid glass styling */}\r\n      <div\r\n        ref={containerRef}\r\n        className={`absolute inset-0 ${className}`}\r\n        style={{\r\n          backdropFilter: `url(#${filterId}) blur(4px) brightness(1.5) saturate(1.1)`,\r\n          WebkitBackdropFilter: `url(#${filterId}) blur(4px) brightness(1.5) saturate(1.1)`,\r\n          boxShadow: `\r\n            0 4px 8px rgba(0, 0, 0, 0.25),\r\n            0 -10px 25px inset rgba(0, 0, 0, 0.15),\r\n            0 -1px 4px 1px inset rgba(255, 255, 255, 0.74)\r\n          `,\r\n        }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}