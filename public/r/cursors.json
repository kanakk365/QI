{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cursors",
  "type": "registry:ui",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/Cursors.tsx",
      "content": "\"use client\";\r\nimport { MousePointer2, MousePointerClick } from \"lucide-react\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { motion, useMotionValue, useSpring, easeInOut } from \"motion/react\";\r\nimport { cn } from \"@/src/lib/utils\";\r\n\r\nfunction CursorCard() {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [isHovering, setIsHovering] = useState(false);\r\n  const mouseX = useMotionValue(0);\r\n  const mouseY = useMotionValue(0);\r\n  const cursor1TargetX = useMotionValue(50);\r\n  const cursor1TargetY = useMotionValue(100);\r\n  const cursor2TargetX = useMotionValue(180);\r\n  const cursor2TargetY = useMotionValue(190);\r\n\r\n  const cursor1X = useSpring(cursor1TargetX, {\r\n    stiffness: 50,\r\n    damping: 25,\r\n    mass: 0.5,\r\n  });\r\n  const cursor1Y = useSpring(cursor1TargetY, {\r\n    stiffness: 50,\r\n    damping: 25,\r\n    mass: 0.5,\r\n  });\r\n\r\n  const cursor2X = useSpring(cursor2TargetX, {\r\n    stiffness: 40,\r\n    damping: 30,\r\n    mass: 0.8,\r\n  });\r\n  const cursor2Y = useSpring(cursor2TargetY, {\r\n    stiffness: 40,\r\n    damping: 30,\r\n    mass: 0.8,\r\n  });\r\n  const updateCursorPositions = (mouseXVal: number, mouseYVal: number) => {\r\n    if (!containerRef.current) return;\r\n    const containerWidth = containerRef.current.offsetWidth;\r\n    const containerHeight = containerRef.current.offsetHeight;\r\n\r\n    const contentWidth = containerWidth - 48;\r\n    const headerHeight = 100;\r\n    const contentAreaHeight = containerHeight - headerHeight - 48;\r\n    const cursorSize = 24;\r\n    const minX = 10;\r\n    const maxX = contentWidth - cursorSize - 10;\r\n    const minY = 10;\r\n    const maxY = contentAreaHeight - cursorSize - 10;\r\n\r\n    const isRight = mouseXVal > containerWidth * 0.5;\r\n    const isBottom = mouseYVal > containerHeight * 0.5;\r\n    let cursor1TargetXVal, cursor1TargetYVal;\r\n    if (!isRight && !isBottom) {\r\n      cursor1TargetXVal = minX;\r\n      cursor1TargetYVal = maxY - 20;\r\n    } else if (isRight && !isBottom) {\r\n      cursor1TargetXVal = maxX - 20;\r\n      cursor1TargetYVal = maxY - 10;\r\n    } else if (!isRight && isBottom) {\r\n      cursor1TargetXVal = minX + 10;\r\n      cursor1TargetYVal = contentAreaHeight * 0.3;\r\n    } else {\r\n      cursor1TargetXVal = contentWidth * 0.3;\r\n      cursor1TargetYVal = contentAreaHeight * 0.3;\r\n    }\r\n\r\n    let cursor2TargetXVal, cursor2TargetYVal;\r\n    if (!isRight && !isBottom) {\r\n      cursor2TargetXVal = contentWidth * 0.5;\r\n      cursor2TargetYVal = contentAreaHeight * 0.4;\r\n    } else if (isRight && !isBottom) {\r\n      cursor2TargetXVal = contentWidth * 0.25;\r\n      cursor2TargetYVal = contentAreaHeight * 0.4;\r\n    } else if (!isRight && isBottom) {\r\n      cursor2TargetXVal = contentWidth * 0.5;\r\n      cursor2TargetYVal = maxY - 10;\r\n    } else {\r\n      cursor2TargetXVal = contentWidth * 0.25;\r\n      cursor2TargetYVal = maxY - 15;\r\n    }\r\n\r\n    cursor1TargetX.set(Math.max(minX, Math.min(maxX, cursor1TargetXVal)));\r\n    cursor1TargetY.set(Math.max(minY, Math.min(maxY, cursor1TargetYVal)));\r\n    cursor2TargetX.set(Math.max(minX, Math.min(maxX, cursor2TargetXVal)));\r\n    cursor2TargetY.set(Math.max(minY, Math.min(maxY, cursor2TargetYVal)));\r\n  };\r\n\r\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    if (containerRef.current) {\r\n      const rect = containerRef.current.getBoundingClientRect();\r\n      const x = e.clientX - rect.left;\r\n      const y = e.clientY - rect.top;\r\n      mouseX.set(x);\r\n      mouseY.set(y);\r\n\r\n      if (isHovering) {\r\n        updateCursorPositions(x, y);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseEnter = () => {\r\n    setIsHovering(true);\r\n    if (containerRef.current) {\r\n      const x = mouseX.get();\r\n      const y = mouseY.get();\r\n      updateCursorPositions(x, y);\r\n    }\r\n  };\r\n  const handleMouseLeave = () => {\r\n    setIsHovering(false);\r\n    cursor1TargetX.set(50);\r\n    cursor1TargetY.set(100);\r\n    cursor2TargetX.set(180);\r\n    cursor2TargetY.set(190);\r\n  };\r\n\r\n  const cursorVariants = {\r\n    idle: {\r\n      scale: 1,\r\n      rotate: 0,\r\n    },\r\n    hover: {\r\n      scale: 1.1,\r\n      rotate: [0, -2, 2, 0],\r\n      transition: {\r\n        rotate: {\r\n          repeat: Infinity,\r\n          duration: 2,\r\n          ease: easeInOut,\r\n        },\r\n        scale: {\r\n          duration: 0.2,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const nameTagVariants = {\r\n    idle: {\r\n      opacity: 0.8,\r\n      y: 0,\r\n    },\r\n    hover: {\r\n      opacity: 1,\r\n      y: -2,\r\n      transition: {\r\n        duration: 0.2,\r\n      },\r\n    },\r\n  };\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      className={cn(\r\n        \"h-[26rem] w-[20rem] rounded-lg relative overflow-hidden\",\r\n        \"bg-background dark:bg-neutral-900\",\r\n        \"shadow-[0_-2px_4px_rgba(0,0,0,0.1),0_-8px_16px_rgba(0,0,0,0.05),0_-16px_32px_rgba(0,0,0,0.02)]\",\r\n        \"dark:shadow-[0_-2px_4px_rgba(255,255,255,0.1),0_-8px_16px_rgba(255,255,255,0.05),0_-16px_32px_rgba(255,255,255,0.02)]\",\r\n        \"border border-border\"\r\n      )}\r\n    >\r\n      <div\r\n        className=\"absolute inset-0\"\r\n        style={{\r\n          backgroundImage: `\r\n            linear-gradient(rgba(0,0,0,0.05) 1px, transparent 1px),\r\n            linear-gradient(90deg, rgba(0,0,0,0.05) 1px, transparent 1px)\r\n          `,\r\n          backgroundSize: \"14px 14px\",\r\n          maskImage:\r\n            \"linear-gradient(to bottom, transparent 0%, transparent 25%, rgba(0,0,0,1) 30%, rgba(0,0,0,1) 100%)\",\r\n          WebkitMaskImage:\r\n            \"linear-gradient(to bottom, transparent 0%, transparent 25%, rgba(0,0,0,1) 30%, rgba(0,0,0,1) 100%)\",\r\n        }}\r\n      />\r\n      <div\r\n        className=\"absolute inset-0 dark:hidden\"\r\n        style={{\r\n          backgroundImage: `\r\n            linear-gradient(rgba(0,0,0,0.03) 1px, transparent 1px),\r\n            linear-gradient(90deg, rgba(0,0,0,0.03) 1px, transparent 1px)\r\n          `,\r\n          backgroundSize: \"14px 14px\",\r\n          maskImage:\r\n            \"linear-gradient(to bottom, transparent 0%, transparent 25%, rgba(0,0,0,1) 30%, rgba(0,0,0,1) 100%)\",\r\n          WebkitMaskImage:\r\n            \"linear-gradient(to bottom, transparent 0%, transparent 25%, rgba(0,0,0,1) 30%, rgba(0,0,0,1) 100%)\",\r\n        }}\r\n      />\r\n      <div\r\n        className=\"absolute inset-0 hidden dark:block\"\r\n        style={{\r\n          backgroundImage: `\r\n            linear-gradient(rgba(255,255,255,0.04) 1px, transparent 1px),\r\n            linear-gradient(90deg, rgba(255,255,255,0.04) 1px, transparent 1px)\r\n          `,\r\n          backgroundSize: \"14px 14px\",\r\n          maskImage:\r\n            \"linear-gradient(to bottom, transparent 0%, transparent 25%, rgba(0,0,0,1) 30%, rgba(0,0,0,1) 100%)\",\r\n          WebkitMaskImage:\r\n            \"linear-gradient(to bottom, transparent 0%, transparent 25%, rgba(0,0,0,1) 30%, rgba(0,0,0,1) 100%)\",\r\n        }}\r\n      />\r\n      <div className=\"relative p-6 flex flex-col h-full \">\r\n        {\" \"}\r\n        <h1 className=\"text-base  font-semibold text-foreground dark:text-neutral-100 mb-4 flex items-center gap-1\">\r\n          {\" \"}\r\n          <MousePointerClick size={17} />\r\n          Interactive Demo\r\n        </h1>{\" \"}\r\n        <div>\r\n          <h2 className=\" text-sm text-foreground dark:text-neutral-100  mb-1\">\r\n            Mouse tracking simulation\r\n          </h2>\r\n          <p className=\"text-sm text-muted-foreground dark:text-neutral-400\">\r\n            Dynamic cursor movement and interactions\r\n          </p>\r\n        </div>{\" \"}\r\n        <div className=\"flex-1 mt-2 relative\">\r\n          <motion.div\r\n            className=\"absolute\"\r\n            style={{\r\n              x: cursor1X,\r\n              y: cursor1Y,\r\n            }}\r\n            variants={cursorVariants}\r\n            animate={isHovering ? \"hover\" : \"idle\"}\r\n          >\r\n            <MousePointer2\r\n              strokeWidth={1}\r\n              size={40}\r\n              className=\"text-muted-foreground dark:text-neutral-500\"\r\n            />\r\n            <motion.div\r\n              className=\"absolute -top-8 left-6 bg-muted dark:bg-neutral-800 text-foreground dark:text-neutral-100 px-2 py-1 rounded-lg text-xs whitespace-nowrap border border-border dark:border-neutral-700\"\r\n              variants={nameTagVariants}\r\n              animate={isHovering ? \"hover\" : \"idle\"}\r\n            >\r\n              User A{\" \"}\r\n            </motion.div>\r\n          </motion.div>\r\n          <motion.div\r\n            className=\"absolute \"\r\n            style={{\r\n              x: cursor2X,\r\n              y: cursor2Y,\r\n            }}\r\n            variants={cursorVariants}\r\n            animate={isHovering ? \"hover\" : \"idle\"}\r\n            transition={{ delay: 0.1 }}\r\n          >\r\n            <MousePointer2\r\n              strokeWidth={1}\r\n              size={24}\r\n              className=\"text-muted-foreground dark:text-neutral-500\"\r\n            />{\" \"}\r\n            <motion.div\r\n              className=\"absolute -top-8 left-6 bg-muted dark:bg-neutral-800 text-foreground dark:text-neutral-100 px-2 py-1 rounded-lg text-xs whitespace-nowrap border border-border dark:border-neutral-700\"\r\n              variants={nameTagVariants}\r\n              animate={isHovering ? \"hover\" : \"idle\"}\r\n            >\r\n              User B\r\n            </motion.div>\r\n          </motion.div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CursorCard;\r\n",
      "type": "registry:ui"
    }
  ]
}