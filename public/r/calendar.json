{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar",
  "type": "registry:ui",
  "dependencies": [
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "separator"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/Calendar.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport {\r\n  add,\r\n  eachDayOfInterval,\r\n  endOfMonth,\r\n  endOfWeek,\r\n  format,\r\n  getDay,\r\n  isEqual,\r\n  isSameDay,\r\n  isSameMonth,\r\n  isToday,\r\n  parse,\r\n  startOfToday,\r\n  startOfWeek,\r\n} from \"date-fns\"\r\nimport { ChevronLeftIcon, ChevronRightIcon, Search } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/src/lib/utils\"\r\nimport { Button } from \"@/src/components/ui/button\"\r\nimport { Separator } from \"@/src/components/ui/separator\"\r\nimport { useMediaQuery } from \"@/src/registry/default/hooks/useMediaQuery\"\r\n\r\ninterface Event {\r\n  id: number\r\n  name: string\r\n  time: string\r\n  datetime: string\r\n}\r\n\r\ninterface CalendarData {\r\n  day: Date\r\n  events: Event[]\r\n}\r\n\r\ninterface FullScreenCalendarProps {\r\n  data: CalendarData[]\r\n}\r\n\r\nconst colStartClasses = [\"\", \"col-start-2\", \"col-start-3\", \"col-start-4\", \"col-start-5\", \"col-start-6\", \"col-start-7\"]\r\n\r\nexport function FullScreenCalendar({ data }: FullScreenCalendarProps) {\r\n  const today = startOfToday()\r\n  const [selectedDay, setSelectedDay] = React.useState(today)\r\n  const [currentMonth, setCurrentMonth] = React.useState(format(today, \"MMM-yyyy\"))\r\n  const firstDayCurrentMonth = parse(currentMonth, \"MMM-yyyy\", new Date())\r\n  const isDesktop = useMediaQuery(\"(min-width: 768px)\")\r\n\r\n  const days = eachDayOfInterval({\r\n    start: startOfWeek(firstDayCurrentMonth),\r\n    end: endOfWeek(endOfMonth(firstDayCurrentMonth)),\r\n  })\r\n\r\n  function previousMonth() {\r\n    const firstDayNextMonth = add(firstDayCurrentMonth, { months: -1 })\r\n    setCurrentMonth(format(firstDayNextMonth, \"MMM-yyyy\"))\r\n  }\r\n\r\n  function nextMonth() {\r\n    const firstDayNextMonth = add(firstDayCurrentMonth, { months: 1 })\r\n    setCurrentMonth(format(firstDayNextMonth, \"MMM-yyyy\"))\r\n  }\r\n\r\n  function goToToday() {\r\n    setCurrentMonth(format(today, \"MMM-yyyy\"))\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-1 flex-col\">\r\n      {/* Calendar Header */}\r\n      <div className=\"flex flex-col space-y-4 p-4 md:flex-row md:items-center md:justify-between md:space-y-0 lg:flex-none\">\r\n        <div className=\"flex flex-auto\">\r\n          <div className=\"flex items-center gap-4\">\r\n            <div className=\"hidden w-20 flex-col items-center justify-center rounded-lg border bg-muted p-0.5 md:flex\">\r\n              <h1 className=\"p-1 text-xs uppercase text-muted-foreground\">{format(today, \"MMM\")}</h1>\r\n              <div className=\"flex w-full items-center justify-center rounded-lg border bg-background p-0.5 text-lg font-bold\">\r\n                <span>{format(today, \"d\")}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex flex-col\">\r\n              <h2 className=\"text-lg font-semibold text-foreground\">{format(firstDayCurrentMonth, \"MMMM, yyyy\")}</h2>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                {format(firstDayCurrentMonth, \"MMM d, yyyy\")} -{\" \"}\r\n                {format(endOfMonth(firstDayCurrentMonth), \"MMM d, yyyy\")}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex flex-col items-center gap-4 md:flex-row md:gap-6\">\r\n          <Button variant=\"outline\" size=\"icon\" className=\"hidden lg:flex\">\r\n            <Search size={16} strokeWidth={2} aria-hidden=\"true\" />\r\n          </Button>\r\n\r\n          <Separator orientation=\"vertical\" className=\"hidden h-6 lg:block\" />\r\n\r\n          <div className=\"inline-flex w-full -space-x-px rounded-lg shadow-sm shadow-black/5 md:w-auto rtl:space-x-reverse\">\r\n            <Button\r\n              onClick={previousMonth}\r\n              className=\"rounded-none shadow-none first:rounded-s-lg last:rounded-e-lg focus-visible:z-10\"\r\n              variant=\"outline\"\r\n              size=\"icon\"\r\n              aria-label=\"Navigate to previous month\"\r\n            >\r\n              <ChevronLeftIcon size={16} strokeWidth={2} aria-hidden=\"true\" />\r\n            </Button>\r\n            <Button\r\n              onClick={goToToday}\r\n              className=\"w-full rounded-none shadow-none first:rounded-s-lg last:rounded-e-lg focus-visible:z-10 md:w-auto\"\r\n              variant=\"outline\"\r\n            >\r\n              Today\r\n            </Button>\r\n            <Button\r\n              onClick={nextMonth}\r\n              className=\"rounded-none shadow-none first:rounded-s-lg last:rounded-e-lg focus-visible:z-10\"\r\n              variant=\"outline\"\r\n              size=\"icon\"\r\n              aria-label=\"Navigate to next month\"\r\n            >\r\n              <ChevronRightIcon size={16} strokeWidth={2} aria-hidden=\"true\" />\r\n            </Button>\r\n          </div>\r\n\r\n          <Separator orientation=\"vertical\" className=\"hidden h-6 md:block\" />\r\n          <Separator orientation=\"horizontal\" className=\"block w-full md:hidden\" />\r\n          \r\n        </div>\r\n      </div>\r\n\r\n      {/* Calendar Grid */}\r\n      <div className=\"lg:flex lg:flex-auto lg:flex-col\">\r\n        {/* Week Days Header */}\r\n        <div className=\"grid grid-cols-7 border text-center text-xs font-semibold leading-6 lg:flex-none\">\r\n          <div className=\"border-r py-2.5\">Sun</div>\r\n          <div className=\"border-r py-2.5\">Mon</div>\r\n          <div className=\"border-r py-2.5\">Tue</div>\r\n          <div className=\"border-r py-2.5\">Wed</div>\r\n          <div className=\"border-r py-2.5\">Thu</div>\r\n          <div className=\"border-r py-2.5\">Fri</div>\r\n          <div className=\"py-2.5\">Sat</div>\r\n        </div>\r\n\r\n        {/* Calendar Days */}\r\n        <div className=\"flex text-xs leading-6 lg:flex-auto\">\r\n          <div className=\"hidden w-full border-x lg:grid lg:grid-cols-7 lg:grid-rows-5\">\r\n            {days.map((day, dayIdx) =>\r\n              !isDesktop ? (\r\n                <button\r\n                  onClick={() => setSelectedDay(day)}\r\n                  key={dayIdx}\r\n                  type=\"button\"\r\n                  className={cn(\r\n                    isEqual(day, selectedDay) && \"text-primary-foreground\",\r\n                    !isEqual(day, selectedDay) &&\r\n                      !isToday(day) &&\r\n                      isSameMonth(day, firstDayCurrentMonth) &&\r\n                      \"text-foreground\",\r\n                    !isEqual(day, selectedDay) &&\r\n                      !isToday(day) &&\r\n                      !isSameMonth(day, firstDayCurrentMonth) &&\r\n                      \"text-muted-foreground\",\r\n                    (isEqual(day, selectedDay) || isToday(day)) && \"font-semibold\",\r\n                    \"flex h-14 flex-col border-b border-r px-3 py-2 hover:bg-muted focus:z-10\",\r\n                  )}\r\n                >\r\n                  <time\r\n                    dateTime={format(day, \"yyyy-MM-dd\")}\r\n                    className={cn(\r\n                      \"ml-auto flex size-6 items-center justify-center rounded-full\",\r\n                      isEqual(day, selectedDay) && isToday(day) && \"bg-primary text-primary-foreground\",\r\n                      isEqual(day, selectedDay) && !isToday(day) && \"bg-primary text-primary-foreground\",\r\n                    )}\r\n                  >\r\n                    {format(day, \"d\")}\r\n                  </time>\r\n                  {data.filter((date) => isSameDay(date.day, day)).length > 0 && (\r\n                    <div>\r\n                      {data\r\n                        .filter((date) => isSameDay(date.day, day))\r\n                        .map((date) => (\r\n                          <div key={date.day.toString()} className=\"-mx-0.5 mt-auto flex flex-wrap-reverse\">\r\n                            {date.events.map((event) => (\r\n                              <span\r\n                                key={event.id}\r\n                                className=\"mx-0.5 mt-1 h-1.5 w-1.5 rounded-full bg-muted-foreground\"\r\n                              />\r\n                            ))}\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                  )}\r\n                </button>\r\n              ) : (\r\n                <div\r\n                  key={dayIdx}\r\n                  onClick={() => setSelectedDay(day)}\r\n                  className={cn(\r\n                    dayIdx === 0 && colStartClasses[getDay(day)],\r\n                    !isEqual(day, selectedDay) &&\r\n                      !isToday(day) &&\r\n                      !isSameMonth(day, firstDayCurrentMonth) &&\r\n                      \"bg-accent/50 text-muted-foreground\",\r\n                    \"relative flex flex-col border-b border-r hover:bg-muted focus:z-10\",\r\n                    !isEqual(day, selectedDay) && \"hover:bg-accent/75\",\r\n                  )}\r\n                >\r\n                  <header className=\"flex items-center justify-between p-2.5\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className={cn(\r\n                        isEqual(day, selectedDay) && \"text-primary-foreground\",\r\n                        !isEqual(day, selectedDay) &&\r\n                          !isToday(day) &&\r\n                          isSameMonth(day, firstDayCurrentMonth) &&\r\n                          \"text-foreground\",\r\n                        !isEqual(day, selectedDay) &&\r\n                          !isToday(day) &&\r\n                          !isSameMonth(day, firstDayCurrentMonth) &&\r\n                          \"text-muted-foreground\",\r\n                        isEqual(day, selectedDay) && isToday(day) && \"border-none bg-primary\",\r\n                        isEqual(day, selectedDay) && !isToday(day) && \"bg-foreground\",\r\n                        (isEqual(day, selectedDay) || isToday(day)) && \"font-semibold\",\r\n                        \"flex h-7 w-7 items-center justify-center rounded-full text-xs hover:border\",\r\n                      )}\r\n                    >\r\n                      <time dateTime={format(day, \"yyyy-MM-dd\")}>{format(day, \"d\")}</time>\r\n                    </button>\r\n                  </header>\r\n                  <div className=\"flex-1 p-2.5\">\r\n                    {data\r\n                      .filter((event) => isSameDay(event.day, day))\r\n                      .map((day) => (\r\n                        <div key={day.day.toString()} className=\"space-y-1.5\">\r\n                          {day.events.slice(0, 1).map((event) => (\r\n                            <div\r\n                              key={event.id}\r\n                              className=\"flex flex-col items-start gap-1 rounded-lg border bg-muted/50 p-2 text-xs leading-tight\"\r\n                            >\r\n                              <p className=\"font-medium leading-none\">{event.name}</p>\r\n                              <p className=\"leading-none text-muted-foreground\">{event.time}</p>\r\n                            </div>\r\n                          ))}\r\n                          {day.events.length > 1 && (\r\n                            <div className=\"text-xs text-muted-foreground\">+ {day.events.length - 1} more</div>\r\n                          )}\r\n                        </div>\r\n                      ))}\r\n                  </div>\r\n                </div>\r\n              ),\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"isolate grid w-full grid-cols-7 grid-rows-5 border-x lg:hidden\">\r\n            {days.map((day, dayIdx) => (\r\n              <button\r\n                onClick={() => setSelectedDay(day)}\r\n                key={dayIdx}\r\n                type=\"button\"\r\n                className={cn(\r\n                  isEqual(day, selectedDay) && \"text-primary-foreground\",\r\n                  !isEqual(day, selectedDay) &&\r\n                    !isToday(day) &&\r\n                    isSameMonth(day, firstDayCurrentMonth) &&\r\n                    \"text-foreground\",\r\n                  !isEqual(day, selectedDay) &&\r\n                    !isToday(day) &&\r\n                    !isSameMonth(day, firstDayCurrentMonth) &&\r\n                    \"text-muted-foreground\",\r\n                  (isEqual(day, selectedDay) || isToday(day)) && \"font-semibold\",\r\n                  \"flex h-14 flex-col border-b border-r px-3 py-2 hover:bg-muted focus:z-10\",\r\n                )}\r\n              >\r\n                <time\r\n                  dateTime={format(day, \"yyyy-MM-dd\")}\r\n                  className={cn(\r\n                    \"ml-auto flex size-6 items-center justify-center rounded-full\",\r\n                    isEqual(day, selectedDay) && isToday(day) && \"bg-primary text-primary-foreground\",\r\n                    isEqual(day, selectedDay) && !isToday(day) && \"bg-primary text-primary-foreground\",\r\n                  )}\r\n                >\r\n                  {format(day, \"d\")}\r\n                </time>\r\n                {data.filter((date) => isSameDay(date.day, day)).length > 0 && (\r\n                  <div>\r\n                    {data\r\n                      .filter((date) => isSameDay(date.day, day))\r\n                      .map((date) => (\r\n                        <div key={date.day.toString()} className=\"-mx-0.5 mt-auto flex flex-wrap-reverse\">\r\n                          {date.events.map((event) => (\r\n                            <span key={event.id} className=\"mx-0.5 mt-1 h-1.5 w-1.5 rounded-full bg-muted-foreground\" />\r\n                          ))}\r\n                        </div>\r\n                      ))}\r\n                  </div>\r\n                )}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Sample calendar data for the default export\r\nconst sampleCalendarData = [\r\n  {\r\n    day: new Date(2024, 0, 15),\r\n    events: [\r\n      {\r\n        id: 1,\r\n        name: \"Team Meeting\",\r\n        time: \"9:00 AM\",\r\n        datetime: \"2024-01-15T09:00:00\"\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Client Call\",\r\n        time: \"2:00 PM\",\r\n        datetime: \"2024-01-15T14:00:00\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    day: new Date(2024, 0, 18),\r\n    events: [\r\n      {\r\n        id: 3,\r\n        name: \"Project Review\",\r\n        time: \"10:30 AM\",\r\n        datetime: \"2024-01-18T10:30:00\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    day: new Date(2024, 0, 22),\r\n    events: [\r\n      {\r\n        id: 4,\r\n        name: \"Design Workshop\",\r\n        time: \"1:00 PM\",\r\n        datetime: \"2024-01-22T13:00:00\"\r\n      },\r\n      {\r\n        id: 5,\r\n        name: \"Code Review\",\r\n        time: \"4:00 PM\",\r\n        datetime: \"2024-01-22T16:00:00\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    day: new Date(2024, 0, 25),\r\n    events: [\r\n      {\r\n        id: 6,\r\n        name: \"Sprint Planning\",\r\n        time: \"11:00 AM\",\r\n        datetime: \"2024-01-25T11:00:00\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nexport default function Calendar() {\r\n  return (\r\n    <div className=\"w-full h-full bg-background\">\r\n      <FullScreenCalendar data={sampleCalendarData} />\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/default/hooks/useMediaQuery.tsx",
      "content": "\"use client\"\r\n\r\nimport { useEffect, useState } from \"react\"\r\n\r\nexport function useMediaQuery(query: string): boolean {\r\n  const [matches, setMatches] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const media = window.matchMedia(query)\r\n\r\n    // Set initial value\r\n    setMatches(media.matches)\r\n\r\n    // Update matches when media query changes\r\n    const listener = (event: MediaQueryListEvent) => {\r\n      setMatches(event.matches)\r\n    }\r\n\r\n    media.addEventListener(\"change\", listener)\r\n\r\n    return () => {\r\n      media.removeEventListener(\"change\", listener)\r\n    }\r\n  }, [query])\r\n\r\n  return matches\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}