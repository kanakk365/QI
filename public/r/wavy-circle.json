{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wavy-circle",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/WavyCircle.tsx",
      "content": "\"use client\";\n\nimport { useMemo, useRef, useState } from \"react\";\nimport { motion } from \"motion/react\";\n\ninterface WavyCircleProps {\n  size?: number;\n  radius?: number;\n  lineCount?: number;\n  lineHeight?: number;\n  color?: string;\n}\n\nexport default function WavyCircle({\n  size = 400,\n  radius = 150,\n  lineCount = 96,\n  lineHeight = 25,\n  color = \"#f87171\",\n}: WavyCircleProps) {\n  const [activeIndex, setActiveIndex] = useState<number | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lineThicknessPx = 2;\n\n  const angles = useMemo(() => {\n    return Array.from({ length: lineCount }, (_, i) => (i * 360) / lineCount);\n  }, [lineCount]);\n\n  const getDistance = (a: number, b: number) => {\n    const direct = Math.abs(a - b);\n    return Math.min(direct, lineCount - direct);\n  };\n\n  const getScaleY = (index: number) => {\n    if (activeIndex === null) return 1;\n    const d = getDistance(activeIndex, index);\n    if (d === 0) return 2.0;\n    if (d === 1) return 1.6;\n    if (d === 2) return 1.3;\n    if (d === 3) return 1.15;\n    return 1;\n  };\n\n  const handleMouseMove: React.MouseEventHandler<HTMLDivElement> = (e) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const cx = rect.left + rect.width / 2;\n    const cy = rect.top + rect.height / 2;\n    const dx = e.clientX - cx;\n    const dy = e.clientY - cy;\n    const rad = Math.atan2(dy, dx);\n    let deg = (rad * 180) / Math.PI;\n    if (deg < 0) deg += 360;\n    const degFromTop = (deg + 90) % 360;\n    const step = 360 / lineCount;\n    const idx = Math.round(degFromTop / step) % lineCount;\n    setActiveIndex(idx);\n  };\n\n  const handleMouseLeave = () => setActiveIndex(null);\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"relative\"\n      style={{ width: size, height: size }}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={handleMouseLeave}\n    >\n      <div className=\"absolute inset-0 rounded-full \" />\n\n      {angles.map((angle, index) => (\n        <div\n          key={index}\n          className=\"absolute\"\n          style={{\n            left: \"50%\",\n            top: \"50%\",\n            translate: \"-50% -50%\",\n            rotate: `${angle}deg`,\n          }}\n        >\n          <motion.div\n            className=\"rounded-full\"\n            style={{\n              backgroundColor: color,\n              width: `${lineThicknessPx}px`,\n              height: `${lineHeight}px`,\n              translate: `0 -${radius}px`,\n              transformOrigin: \"bottom center\",\n            }}\n            animate={{\n              scaleY: getScaleY(index),\n            }}\n            transition={{ duration: 0.15, ease: \"easeOut\" }}\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}